import express from "express"; // Importa o framework Express para criar o servidor HTTP
import http from "http"; // Importa o mÃ³dulo HTTP nativo do Node.js para criar o servidor HTTP
import cors from "cors"; // Importa o middleware CORS para permitir solicitaÃ§Ãµes de diferentes origens
import dotenv from "dotenv"; // Importa o mÃ³dulo dotenv para carregar variÃ¡veis de ambiente a partir de um arquivo .env

import passport from "passport"; // Importa o mÃ³dulo Passport para autenticaÃ§Ã£o de usuÃ¡rios
import session from "express-session"; // Importa o middleware express-session para gerenciar sessÃµes de usuÃ¡rio
import connectMongo from "connect-mongodb-session"; // Importa o mÃ³dulo connect-mongodb-session para armazenar sessÃµes no MongoDB

import { ApolloServer } from "@apollo/server"; // Importa a classe ApolloServer do Apollo Server para criar um servidor GraphQL
import { startStandaloneServer } from "@apollo/server/standalone"; // Importa a funÃ§Ã£o startStandaloneServer do Apollo Server para iniciar um servidor GraphQL standalone
import { expressMiddleware } from "@apollo/server/express4"; // Importa o middleware express do Apollo Server para integraÃ§Ã£o com o Express
import { ApolloServerPluginDrainHttpServer } from "@apollo/server/plugin/drainHttpServer"; // Importa o plugin ApolloServerPluginDrainHttpServer para gerenciar a finalizaÃ§Ã£o do servidor HTTP

import { buildContext } from "graphql-passport"; // Importa a funÃ§Ã£o buildContext do graphql-passport para construir o contexto do Apollo Server com o Passport

import mergedResolvers from "./resolvers/index.js"; // Importa os resolvers combinados de diferentes mÃ³dulos
import mergedTypeDefs from "./typeDefs/index.js"; // Importa os tipos definidos combinados de diferentes mÃ³dulos

import { connectDB } from "./db/connectDB.js"; // Importa a funÃ§Ã£o connectDB para conectar ao banco de dados MongoDB
import { configurePassport } from "./passport/passport.config.js"; // Importa a funÃ§Ã£o configurePassport para configurar o Passport.js para autenticaÃ§Ã£o

dotenv.config();
configurePassport(); // Configura o Passport.js para autenticaÃ§Ã£o

const app = express(); // Inicializa o aplicativo Express

const httpServer = http.createServer(app); // Cria um servidor HTTP a partir do aplicativo Express

const MongoDBStore = connectMongo(session); // Cria uma instÃ¢ncia do MongoDBStore para armazenar sessÃµes no MongoDB

const store = new MongoDBStore({
  uri: process.env.MONGO_URI, // URI de conexÃ£o com o MongoDB
  collection: "sessions", // ColeÃ§Ã£o para armazenar sessÃµes
});

store.on("error", (err) => console.log(err)); // Trata erros ocorridos no armazenamento de sessÃµes

app.use(
  session({
    secret: process.env.SESSION_SECRET, // Chave secreta para assinar a sessÃ£o
    resave: false, // NÃ£o salva a sessÃ£o se nÃ£o houver alteraÃ§Ãµes
    saveUninitialized: false, // NÃ£o salva sessÃµes nÃ£o inicializadas
    cookie: {
      maxAge: 1000 * 60 * 60 * 24 * 7, // Tempo de vida do cookie de sessÃ£o (7 dias)
      httpOnly: true, // Define o cookie de sessÃ£o como acessÃ­vel apenas pelo servidor
    },
    store: store, // Usa o MongoDBStore para armazenar as sessÃµes
  })
);

app.use(passport.initialize()); // Inicializa o Passport.js para autenticaÃ§Ã£o
app.use(passport.session()); // Usa o Passport.js para gerenciar sessÃµes de usuÃ¡rio

const server = new ApolloServer({
  typeDefs: mergedTypeDefs, // Tipos definidos combinados de diferentes mÃ³dulos
  resolvers: mergedResolvers, // Resolvers combinados de diferentes mÃ³dulos
  plugins: [ApolloServerPluginDrainHttpServer({ httpServer })], // Plugin para gerenciar a finalizaÃ§Ã£o do servidor HTTP
});

await server.start(); // Inicia o servidor Apollo GraphQL

app.use(
  "/graphql", // Rota raiz
  cors({
    origin: "http://localhost:3000", // Origem permitida para solicitaÃ§Ãµes
    credentials: true, // Permite o envio de credenciais (por exemplo, cookies)
  }),
  express.json(), // Middleware para anÃ¡lise de JSON
  expressMiddleware(server, {
    // Middleware para integraÃ§Ã£o do Apollo Server com o Express
    context: async ({ req, res }) => buildContext({ req, res }), // ConstrÃ³i o contexto do Apollo Server com o Passport
  })
);

// Inicia o servidor HTTP na porta 4000 apÃ³s a inicializaÃ§Ã£o do Apollo Server e conexÃ£o com o banco de dados
await new Promise((resolve) => httpServer.listen({ port: 4000 }, resolve));
await connectDB(); // Conecta ao banco de dados MongoDB

console.log(`ðŸš€ Server ready at http://localhost:4000/graphql`); // Exibe mensagem indicando que o servidor estÃ¡ pronto
